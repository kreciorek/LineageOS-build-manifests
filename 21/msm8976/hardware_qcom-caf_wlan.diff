# project hardware/qcom-caf/wlan/

diff --git a/qcwcn/wpa_supplicant_8_lib/driver_cmd_nl80211.c b/qcwcn/wpa_supplicant_8_lib/driver_cmd_nl80211.c
index a540884..4be6a0a 100644
--- a/qcwcn/wpa_supplicant_8_lib/driver_cmd_nl80211.c
+++ b/qcwcn/wpa_supplicant_8_lib/driver_cmd_nl80211.c
@@ -2831,8 +2831,8 @@ void print_setup_cmd_values(struct twt_setup_parameters *twt_setup_params)
 		   twt_setup_params->min_wake_duration);
 	wpa_printf(MSG_DEBUG, "TWT: max wake duration: %d ",
 		   twt_setup_params->max_wake_duration);
-	wpa_printf(MSG_DEBUG, "TWT: wake tsf: 0x%lx ",
-		   twt_setup_params->wake_tsf);
+/*	wpa_printf(MSG_DEBUG, "TWT: wake tsf: 0x%lx ",
+		   twt_setup_params->wake_tsf); */
 	wpa_printf(MSG_DEBUG, "TWT: announce timeout(in us): %u",
 		   twt_setup_params->announce_timeout_us);
 }
@@ -5704,7 +5704,7 @@ static int wpa_driver_tsf_cmd_resp_handler(struct resp_info *info,
 		return NL_SKIP;
 	}
 	ret = os_snprintf(info->reply_buf, info->reply_buf_len,
-			  "tsf_value:%lul host_time:%lul", tsf_value, host_time);
+			  "tsf_value:%lu host_time:%lu", tsf_value, host_time);
 	if (os_snprintf_error(info->reply_buf_len, ret)) {
 		wpa_printf(MSG_ERROR, "%s:Fail to print buffer", __func__);
 		return -ENOMEM;
diff --git a/wcnss-service/Android.mk b/wcnss-service/Android.mk
index 9eab85b..1239015 100644
--- a/wcnss-service/Android.mk
+++ b/wcnss-service/Android.mk
@@ -1,37 +1,73 @@
 ifneq (,$(filter arm aarch64 arm64, $(TARGET_ARCH)))
+
 LOCAL_PATH := $(call my-dir)
+
 include $(CLEAR_VARS)
+
 ifeq ($(PRODUCT_VENDOR_MOVE_ENABLED),true)
 LOCAL_VENDOR_MODULE := true
 endif
+
 LOCAL_MODULE := wcnss_service
-LOCAL_HEADER_LIBRARIES += vendor_common_inc
+LOCAL_C_INCLUDES += $(TARGET_OUT_HEADERS)/common/inc/
 LOCAL_SRC_FILES := wcnss_service.c
 LOCAL_SHARED_LIBRARIES := libc libcutils libutils liblog
+
 ifeq ($(strip $(TARGET_USES_QCOM_WCNSS_QMI)),true)
-ifeq ($(TARGET_USES_WCNSS_MAC_ADDR_REV),true)
-LOCAL_CFLAGS += -DWCNSS_QMI_MAC_ADDR_REV
-endif
+
 ifeq ($(TARGET_PROVIDES_WCNSS_QMI),true)
 LOCAL_CFLAGS += -DWCNSS_QMI_OSS
 LOCAL_SHARED_LIBRARIES += libdl
 else
+ifeq ($(TARGET_USES_WCNSS_MAC_ADDR_REV),true)
+LOCAL_CFLAGS += -DWCNSS_QMI_MAC_ADDR_REV
+endif
+ifneq ($(QCPATH),)
 LOCAL_CFLAGS += -DWCNSS_QMI -DMDM_DETECT
-LOCAL_HEADER_LIBRARIES += libmdmdetect_headers
-ifeq ($(filter 10% Q% q%,$(TARGET_PLATFORM_VERSION)),)
-#For Android R and above, assuming not compiling on Q and lower
-LOCAL_HEADER_LIBRARIES += libqmi_common_headers
+LOCAL_SHARED_LIBRARIES += libwcnss_qmi
 else
-LOCAL_C_INCLUDES += $(TARGET_OUT_HEADERS)/qmi-framework/inc
-endif
-LOCAL_SRC_FILES += wcnss_qmi_client.c device_management_service_v01.c
-LOCAL_SHARED_LIBRARIES += libqmi_cci libqmi_common_so
-LOCAL_HEADER_LIBRARIES += libmdmdetect_headers
-LOCAL_SHARED_LIBRARIES += libmdmdetect
-LOCAL_HEADER_LIBRARIES += libril-qc-qmi-services-headers
+LOCAL_CFLAGS += -DWCNSS_QMI_OSS
+LOCAL_SHARED_LIBRARIES += libdl
+endif #QCPATH
 endif #TARGET_PROVIDES_WCNSS_QMI
+
 endif #TARGET_USES_QCOM_WCNSS_QMI
+
 LOCAL_MODULE_TAGS := optional
-LOCAL_CFLAGS += -Wall -Werror
+LOCAL_CFLAGS += -Wall
+
 include $(BUILD_EXECUTABLE)
+
+ifneq ($(TARGET_PROVIDES_WCNSS_QMI),true)
+ifeq ($(strip $(TARGET_USES_QCOM_WCNSS_QMI)),true)
+ifneq ($(QCPATH),)
+include $(CLEAR_VARS)
+
+ifeq ($(PRODUCT_VENDOR_MOVE_ENABLED),true)
+LOCAL_VENDOR_MODULE := true
 endif
+
+LOCAL_C_INCLUDES += $(TARGET_OUT_HEADERS)/qmi-framework/inc
+LOCAL_C_INCLUDES += $(TARGET_OUT_HEADERS)/qmi/services
+LOCAL_C_INCLUDES += $(TARGET_OUT_HEADERS)/qmi/platform
+LOCAL_C_INCLUDES += $(TARGET_OUT_HEADERS)/qmi/inc
+LOCAL_SHARED_LIBRARIES := libc libcutils libutils liblog
+LOCAL_SHARED_LIBRARIES += libqmiservices libqmi_cci
+LOCAL_C_INCLUDES += $(TARGET_OUT_HEADERS)/libmdmdetect/inc
+LOCAL_SHARED_LIBRARIES += libmdmdetect
+LOCAL_HEADER_LIBRARIES += libril-qc-qmi-services-headers
+LOCAL_CFLAGS += -DWCNSS_QMI
+LOCAL_SRC_FILES += wcnss_qmi_client.c
+
+LOCAL_MODULE := libwcnss_qmi
+LOCAL_MODULE_TAGS := optional
+
+LOCAL_CFLAGS += -Wall
+
+include $(BUILD_SHARED_LIBRARY)
+
+endif #QCPATH
+endif #TARGET_USES_QCOM_WCNSS_QMI
+endif #TARGET_PROVIDES_WCNSS_QMI
+
+endif #TARGET_ARCH == arm
